/*
 * Copyright (c) 2002-2005 Intel Corporation
 * Copyright (c) 2000-2005 The Regents of the University of California
 * All rights reserved.
 * See license.txt file included with the distribution.
 *
 * $Id: Health.h,v 1.4.2.1 2007/04/27 06:07:03 njain Exp $
 */
 
#ifndef _HEALTH_H_
#define _HEALTH_H_

#define XMESH_VERSION 1

/**
 * For constantly sending Health packets. 01-05-05 (Finishline)
 */
typedef	struct _health_node_quality {
	uint16_t node_id;	/* Id of the neighbor			*/
	uint8_t link_quality;	/* Etx ingress and egress values */
	uint8_t path_cost;	/* Cost to base station  */
	uint8_t radio_link_indicator;	/* Radio level link indicators (RSSI or LQI)	*/
} __attribute ((packed)) hn_quality;

#ifndef HP_MAX_NODES
#define HP_MAX_NODES	2
#define HP_MAX_NEIGHBOR	3
#endif /* HP_MAX_NODES */


/**
 * HEALTH PACKET TYPES
*/
#define HM_TYPE_STATS		1	/* Type Health-Stats Msg */
#define HM_TYPE_NEIGHBOR	2	/* Type Healt-Neighbor Msg */
#define HM_TYPE_ADVANCED	0x0F /* Set old type so we can move to new version. */

#define HM_GET_OLD_TYPE(hp) (((hp)->health_hdr.type_nodes >>4) & 0x0F)
#define HM_SET_OLD_TYPE(hp,type)  {(hp)->health_hdr.type_nodes &= 0x0F;(hp)->health_hdr.type_nodes |= (type)<<4;}
#define HM_GET_TYPE(hp) ((hp)->health_hdr.type)
#define HM_SET_TYPE(hp,t)  {(hp)->health_hdr.type = t;}
#define HM_GET_VERSION(hp) ((hp)->health_hdr.version_num)
#define HM_SET_VERSION(hp,version)  {(hp)->health_hdr.version_num = version;}
#define HM_SET_NUM_NODES(hp,nodes) {(hp)->health_hdr.type_nodes &= 0xF0;(hp)->health_hdr.type_nodes |= (nodes);}
#define HM_GET_NUM_NODES(hp) ((hp)->health_hdr.type_nodes & 0xF)


typedef struct _health_hdr_ {
	/**
	 * XMESH 1 Backward compatability  (All XMesh 2+ packets will have
	 * The high order 4 bits has the version number, and the
	 * low-order 4 bits has the number of nodes in the struct hn_qualtiy at the end
	 */
	uint8_t type_nodes;	/* Contains both type and node cnt. Backward compatibility with XMesh 1	*/
	uint8_t version_num; /* xmesh/health version number */
	uint8_t type; /* Health Packet type from XMesh 2 and beyond */
} __attribute__ ((packed)) HealthHdr;


/**
 * Primary health packet for assessing network statistic metrics.
 */
typedef struct _health_msg_ {
	/** Health Message Header */
	HealthHdr health_hdr;   
	
	uint16_t seq_num;         /** Sequence number of health pkt */
	uint16_t num_node_pkts;   /** Num pkts generated by node    */
	uint16_t num_fwd_pkts;    /** Num of pkts forwarded (not from us) */
	uint16_t num_drop_pkts;   /** Num of pkts I could not send	*/
	uint16_t num_rexmits;     /** Number of pkts re-transmitted	*/
//	uint8_t  hop_count;       /** Number of hops to the base   */
//	uint8_t  path_cost;       /** Nodes path cost to the base  */
	uint8_t  battery_voltage; /** Battery Voltage */
	uint16_t power_sum;       /** Power statistic from mica2 LP stack */
	uint8_t  rsvd_app_type;   /** Reserved xbow field to id sending app */

	/** List of parents and parent information */
	hn_quality nodeinfo [HP_MAX_NODES]; 
} __attribute__ ((packed)) HealthMsg;

/**
 * Every other time we send out the neighbor pkt
 */
typedef struct _health_neighbor_ {
	HealthHdr health_hdr;   /*Health Message Header */
	hn_quality nodeinfo [HP_MAX_NEIGHBOR];
} __attribute__ ((packed)) HealthNeighbor;

#endif /* _HEALTH_H_ */
